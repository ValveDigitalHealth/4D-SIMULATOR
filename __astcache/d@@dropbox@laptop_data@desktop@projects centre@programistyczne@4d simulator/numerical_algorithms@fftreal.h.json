16
{"last_modification_time":1130408818,"language":2,"import_file":"d:/dropbox/laptop_data/desktop/projects centre/programistyczne/4d simulator/numerical_algorithms/fftreal.cpp","args_hash":9797943755155221232,"includes":[],"dependencies":["d:/dropbox/laptop_data/desktop/projects centre/programistyczne/4d simulator/numerical_algorithms/fftreal.cpp","c:/program files (x86)/embarcadero/studio/22.0/include/windows/crtl/math.h","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/ymath.h","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/yvals.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/crtl/stdarg.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/crtl/_stddef.h","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/xtgmath.h","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/xtr1common","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/cstddef","c:/program files (x86)/embarcadero/studio/22.0/include/windows/crtl/stddef.h","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/cstdlib","c:/program files (x86)/embarcadero/studio/22.0/include/windows/crtl/stdlib.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/crtl/search.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/crtl/errno.h","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/cassert","c:/program files (x86)/embarcadero/studio/22.0/include/windows/crtl/assert.h","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/cmath","c:/program files (x86)/embarcadero/studio/22.0/include/dinkumware64/xkeycheck.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/crtl/_defs.h","c:/program files (x86)/embarcadero/studio/22.0/include/windows/crtl/_null.h"],"skipped_by_preprocessor":["16:2-18:7","26:2-28:7","104:2-106:7"],"types":[{"id":0,"usr":17703665784676419364,"detailed_name":"FFTReal","short_name_offset":0,"short_name_size":7,"kind":5,"hover":"","comments":"","declarations":["43:13-43:20|-1|1|4","44:8-44:15|-1|1|4","96:7-96:14|-1|1|4"],"spell":"32:7-32:14|-1|1|2","extent":"32:1-100:2|-1|1|0","bases":[],"derived":[],"types":[],"funcs":[0,1,2,3,4,11,12,13,14],"vars":[3,4,5,6,7,8],"instances":[],"uses":["43:13-43:20|0|2|4","96:7-96:14|0|2|4","96:22-96:29|-1|1|4","97:8-97:15|-1|1|4","97:35-97:42|-1|1|4","98:28-98:35|-1|1|4","99:28-99:35|-1|1|4"]},{"id":1,"usr":22,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":[]},{"id":2,"usr":15929620342620184336,"detailed_name":"FFTReal::flt_t","short_name_offset":9,"short_name_size":5,"kind":252,"hover":"typedef double\tFFTReal::flt_t","comments":"Change this typedef to use a different doubleing point type in your FFTs\r\n\t(i.e. double, double or long double).","declarations":[],"spell":"41:17-41:22|0|2|2","extent":"41:2-41:22|0|2|0","alias_of":1,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[2,2,5,8],"uses":["41:17-41:22|0|2|4","45:18-45:23|-1|1|4","45:36-45:41|-1|1|4","46:25-46:30|-1|1|4","46:37-46:42|-1|1|4","47:19-47:24|-1|1|4","75:9-75:14|-1|1|4","80:3-80:8|-1|1|4","85:8-85:13|-1|1|4","88:2-88:7|-1|1|4"]},{"id":3,"usr":8401821645088375292,"detailed_name":"FFTReal::BitReversedLUT","short_name_offset":9,"short_name_size":14,"kind":5,"hover":"","comments":"Bit-reversed look-up table nested class","declarations":["59:14-59:28|-1|1|4","60:9-60:23|-1|1|4"],"spell":"56:8-56:22|0|2|2","extent":"56:2-67:3|0|2|0","bases":[],"derived":[],"types":[],"funcs":[5,6,7],"vars":[0],"instances":[3],"uses":["59:14-59:28|3|2|4","83:8-83:22|-1|1|4"]},{"id":4,"usr":18,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[0,0,6],"uses":[]},{"id":5,"usr":7867013770687968267,"detailed_name":"FFTReal::TrigoLUT","short_name_offset":9,"short_name_size":8,"kind":5,"hover":"","comments":"Trigonometric look-up table nested class","declarations":["73:14-73:22|-1|1|4","74:9-74:17|-1|1|4"],"spell":"70:8-70:16|0|2|2","extent":"70:2-81:3|0|2|0","bases":[],"derived":[],"types":[],"funcs":[8,9,10],"vars":[2],"instances":[4],"uses":["73:14-73:22|5|2|4","84:8-84:16|-1|1|4"]},{"id":6,"usr":17,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[1,7],"uses":[]}],"funcs":[{"id":0,"usr":15206355778788026812,"detailed_name":"void FFTReal::FFTReal(const long length)","short_name_offset":5,"short_name_size":7,"kind":9,"storage":1,"hover":"","comments":"==========================================================================*/\r\n      Name: Constructor                                                   */\r\n      Input parameters:                                                   */\r\n        - length: length of the array on which we want to do a FFT.       */\r\n                  Range: power of 2 only, > 0.                            */\r\n      Throws: std::bad_alloc, anything                                    */\r\n==========================================================================","declarations":[{"spell":"43:13-43:20|0|2|1","param_spellings":["43:33-43:39"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":1,"usr":16511730999914703341,"detailed_name":"void FFTReal::~FFTReal() noexcept","short_name_offset":14,"short_name_size":8,"kind":6,"storage":1,"hover":"","comments":"==========================================================================*/\r\n      Name: Destructor                                                    */\r\n==========================================================================","declarations":[{"spell":"44:7-44:15|0|2|1","param_spellings":[]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":2,"usr":5493298943341633010,"detailed_name":"void FFTReal::do_fft(FFTReal::flt_t *f, const FFTReal::flt_t *x) const","short_name_offset":14,"short_name_size":6,"kind":6,"storage":1,"hover":"","comments":"==========================================================================*/\r\n      Name: do_fft                                                        */\r\n      Description: Compute the FFT of the array.                          */\r\n      Input parameters:                                                   */\r\n        - x: pointer on the source array (time).                          */\r\n      Output parameters:                                                  */\r\n        - f: pointer on the destination array (frequencies).              */\r\n             f [0...length(x)/2] = real values,                           */\r\n             f [length(x)/2+1...length(x)-1] = imaginary values of        */\r\n               coefficents 1...length(x)/2-1.                             */\r\n      Throws: Nothing                                                     */\r\n==========================================================================","declarations":[{"spell":"45:10-45:16|0|2|1","param_spellings":["45:24-45:25","45:42-45:43"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":3,"usr":72018475723874084,"detailed_name":"void FFTReal::do_ifft(const FFTReal::flt_t *f, FFTReal::flt_t *x) const","short_name_offset":14,"short_name_size":7,"kind":6,"storage":1,"hover":"","comments":"==========================================================================*/\r\n      Name: do_ifft                                                       */\r\n      Description: Compute the inverse FFT of the array. Notice that      */\r\n                   IFFT (FFT (x)) = x * length (x). Data must be          */\r\n                   post-scaled.                                           */\r\n      Input parameters:                                                   */\r\n        - f: pointer on the source array (frequencies).                   */\r\n             f [0...length(x)/2] = real values,                           */\r\n             f [length(x)/2+1...length(x)] = imaginary values of          */\r\n               coefficents 1...length(x)-1.                               */\r\n      Output parameters:                                                  */\r\n        - x: pointer on the destination array (time).                     */\r\n      Throws: Nothing                                                     */\r\n==========================================================================","declarations":[{"spell":"46:10-46:17|0|2|1","param_spellings":["46:31-46:32","46:43-46:44"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":4,"usr":10607819697560058613,"detailed_name":"void FFTReal::rescale(FFTReal::flt_t *x) const","short_name_offset":14,"short_name_size":7,"kind":6,"storage":1,"hover":"","comments":"==========================================================================*/\r\n      Name: rescale                                                       */\r\n      Description: Scale an array by divide each element by its length.   */\r\n                   This function should be called after FFT + IFFT.       */\r\n      Input/Output parameters:                                            */\r\n        - x: pointer on array to rescale (time or frequency).             */\r\n      Throws: Nothing                                                     */\r\n==========================================================================","declarations":[{"spell":"47:10-47:17|0|2|1","param_spellings":["47:25-47:26"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":5,"usr":5570763614957732173,"detailed_name":"void FFTReal::BitReversedLUT::BitReversedLUT(const int nbr_bits)","short_name_offset":14,"short_name_size":14,"kind":9,"storage":1,"hover":"","comments":"==========================================================================*/\r\n      Name: Constructor                                                   */\r\n      Input parameters:                                                   */\r\n        - nbr_bits: number of bits of the array on which we want to do a  */\r\n                    FFT. Range: > 0                                       */\r\n      Throws: std::bad_alloc                                              */\r\n==========================================================================","declarations":[{"spell":"59:14-59:28|3|2|1","param_spellings":["59:40-59:48"]}],"declaring_type":3,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":6,"usr":8064859685876341163,"detailed_name":"void FFTReal::BitReversedLUT::~BitReversedLUT() noexcept","short_name_offset":30,"short_name_size":15,"kind":6,"storage":1,"hover":"","comments":"==========================================================================*/\r\n      Name: Destructor                                                    */\r\n==========================================================================","declarations":[{"spell":"60:8-60:23|3|2|1","param_spellings":[]}],"declaring_type":3,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":7,"usr":15907636958554908970,"detailed_name":"const long *FFTReal::BitReversedLUT::get_ptr() const","short_name_offset":37,"short_name_size":7,"kind":6,"storage":1,"hover":"","comments":"","declarations":[],"spell":"61:16-61:23|3|2|2","extent":"61:3-64:4|3|2|0","declaring_type":3,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":8,"usr":12578983793678740964,"detailed_name":"void FFTReal::TrigoLUT::TrigoLUT(const int nbr_bits)","short_name_offset":14,"short_name_size":8,"kind":9,"storage":1,"hover":"","comments":"==========================================================================*/\r\n      Name: Constructor                                                   */\r\n      Input parameters:                                                   */\r\n        - nbr_bits: number of bits of the array on which we want to do a  */\r\n                    FFT. Range: > 0                                       */\r\n      Throws: std::bad_alloc, anything                                    */\r\n==========================================================================","declarations":[{"spell":"73:14-73:22|5|2|1","param_spellings":["73:34-73:42"]}],"declaring_type":5,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":9,"usr":17934450146523683582,"detailed_name":"void FFTReal::TrigoLUT::~TrigoLUT() noexcept","short_name_offset":24,"short_name_size":9,"kind":6,"storage":1,"hover":"","comments":"==========================================================================*/\r\n      Name: Destructor                                                    */\r\n==========================================================================","declarations":[{"spell":"74:8-74:17|5|2|1","param_spellings":[]}],"declaring_type":5,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":10,"usr":8151403383675953458,"detailed_name":"const FFTReal::flt_t *FFTReal::TrigoLUT::get_ptr(const int level) const","short_name_offset":41,"short_name_size":7,"kind":6,"storage":1,"hover":"","comments":"","declarations":[],"spell":"75:17-75:24|5|2|2","extent":"75:3-78:4|5|2|0","declaring_type":5,"bases":[],"derived":[],"vars":[1],"uses":[],"callees":[]},{"id":11,"usr":8046821982364497609,"detailed_name":"void FFTReal::FFTReal(const FFTReal &other)","short_name_offset":5,"short_name_size":7,"kind":9,"storage":1,"hover":"","comments":"\\\\\\ FORBIDDEN MEMBER FUNCTIONS \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\","declarations":[{"spell":"96:7-96:14|0|2|1","param_spellings":["96:31-96:36"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":12,"usr":5780985429453680557,"detailed_name":"const FFTReal &FFTReal::operator=(const FFTReal &other)","short_name_offset":24,"short_name_size":9,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"97:17-97:27|0|2|1","param_spellings":["97:44-97:49"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":13,"usr":16400079919458842363,"detailed_name":"int FFTReal::operator==(const FFTReal &other)","short_name_offset":13,"short_name_size":10,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"98:9-98:20|0|2|1","param_spellings":["98:37-98:42"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":14,"usr":14556679394246820372,"detailed_name":"int FFTReal::operator!=(const FFTReal &other)","short_name_offset":13,"short_name_size":10,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"99:9-99:20|0|2|1","param_spellings":["99:37-99:42"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]}],"vars":[{"id":0,"usr":16394049921256908983,"detailed_name":"long *FFTReal::BitReversedLUT::_ptr","short_name_offset":31,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"66:12-66:16|3|2|2","extent":"66:3-66:16|3|2|0","type":4,"uses":["63:12-63:16|7|3|4"],"kind":8,"storage":0},{"id":1,"usr":14526585507617483388,"detailed_name":"const int level","short_name_offset":10,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"75:36-75:41|10|3|2","extent":"75:26-75:41|10|3|0","type":6,"uses":["77:27-77:32|10|3|4"],"kind":253,"storage":1},{"id":2,"usr":347767967919500521,"detailed_name":"FFTReal::flt_t *FFTReal::TrigoLUT::_ptr","short_name_offset":35,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"80:13-80:17|5|2|2","extent":"80:3-80:17|5|2|0","type":2,"uses":["77:12-77:16|10|3|4"],"kind":8,"storage":0},{"id":3,"usr":3494915941219240783,"detailed_name":"const FFTReal::BitReversedLUT FFTReal::_bit_rev_lut","short_name_offset":39,"short_name_size":12,"hover":"","comments":"","declarations":[],"spell":"83:23-83:35|0|2|2","extent":"83:2-83:35|0|2|0","type":3,"uses":[],"kind":8,"storage":0},{"id":4,"usr":8619022198417899260,"detailed_name":"const FFTReal::TrigoLUT FFTReal::_trigo_lut","short_name_offset":33,"short_name_size":10,"hover":"","comments":"","declarations":[],"spell":"84:17-84:27|0|2|2","extent":"84:2-84:27|0|2|0","type":5,"uses":[],"kind":8,"storage":0},{"id":5,"usr":5562752858860057865,"detailed_name":"const FFTReal::flt_t FFTReal::_sqrt2_2","short_name_offset":30,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"85:15-85:23|0|2|2","extent":"85:2-85:23|0|2|0","type":2,"uses":[],"kind":8,"storage":0},{"id":6,"usr":1717800119740011617,"detailed_name":"const long FFTReal::_length","short_name_offset":20,"short_name_size":7,"hover":"","comments":"","declarations":[],"spell":"86:14-86:21|0|2|2","extent":"86:2-86:21|0|2|0","type":4,"uses":[],"kind":8,"storage":0},{"id":7,"usr":17826532795264505648,"detailed_name":"const int FFTReal::_nbr_bits","short_name_offset":19,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"87:13-87:22|0|2|2","extent":"87:2-87:22|0|2|0","type":6,"uses":[],"kind":8,"storage":0},{"id":8,"usr":10191802436259768904,"detailed_name":"FFTReal::flt_t *FFTReal::_buffer_ptr","short_name_offset":25,"short_name_size":11,"hover":"","comments":"","declarations":[],"spell":"88:12-88:23|0|2|2","extent":"88:2-88:23|0|2|0","type":2,"uses":[],"kind":8,"storage":0},{"id":9,"usr":15182075590013354041,"detailed_name":"FFTReal_CURRENT_HEADER","short_name_offset":0,"short_name_size":22,"hover":"#define FFTReal_CURRENT_HEADER","comments":"","declarations":[],"spell":"19:9-19:31|-1|1|2","extent":"19:9-19:31|-1|1|0","uses":[],"kind":255,"storage":0},{"id":10,"usr":4052431832974257050,"detailed_name":"FFTReal_HEADER_INCLUDED","short_name_offset":0,"short_name_size":23,"hover":"#define FFTReal_HEADER_INCLUDED","comments":"","declarations":[],"spell":"22:9-22:32|-1|1|2","extent":"22:9-22:32|-1|1|0","uses":[],"kind":255,"storage":0}]}